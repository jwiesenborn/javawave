<!DOCTYPE html>
<html lang="en">
<head>
  <title>Diet Pumpkin Machine</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
  <style>
    /* Set height of the grid so .sidenav can be 100% (adjust if needed) */
    .row.content {height: 720px}
    
    /* Set gray background color and 100% height */
    .sidenav {
      background-color: #f1f1f1;
      height: 100%;
    }
    
    /* Set black background color, white text and some padding */
    footer {
      background-color: #555;
      color: white;
      padding: 15px;
    }
    
    /* On small screens, set height to 'auto' for sidenav and grid */
    @media screen and (max-width: 767px) {
      .sidenav {
        height: auto;
        padding: 15px;
      }
      .row.content {height: auto;} 
    }
    
    /* Tab code from https://www.computerhope.com/issues/ch001034.htm */
    .tab1 { margin-left: 2em; }
    .tab2 { margin-left: 4em; }
    .tab3 { margin-left: 6em; }
    
    .codebox {
    font-family: monospace;
    font-size: 9pt;
    color: blue;
    background-color: cornsilk;
    width: 70%;
    border: 1px;
    }

}
    
  </style>
</head>
<body>

<div class="container-fluid">
  <div class="row content">
    <div class="col-sm-3 sidenav">
      <h4>Diet Pumpkin Machine</h4>
      <ul class="nav nav-pills nav-stacked">
        <li><a href="index.htm">Home</a></li>
        <li><a href="theory.htm">Computer Music Theory</a></li>
        <li class="active"><a href="program.htm">Example Program</a></li>
        <li><a href="harmony.htm">Harmonic Computation</a></li>
        <li><a href="frequency.htm">The Frequency Equation</a></li>
        <li><a href="triad.htm">A Triad</a></li>
        <li><a href="timbre.htm">Wave Graph</a></li>
        <li><a href="tone.htm">Tone</a></li>
        <li><a href="sequences.htm">Sequences</a></li>
        <li><a href="wave.htm">The WAV format</a></li>
        <li><a href="offsets.htm">Offsets (Sequences Part 2)</a></li>
        <li><a href="musicxml.htm">MusicXML</a></li>
      </ul><br>
    </div>

    <div class="col-sm-9">
      <h4><small>EXAMPLE PROGRAM</small></h4>
      <hr>
      <!--<h3>Theory of Pulse Code Modulation</h3>
      <h5><span class="glyphicon glyphicon-time"></span> Post by Jesse</h5>
      <p>Digital speakers play sound through an oscillator that rotates with electrical current. The speaker regulates this current from a stream of bits that it receives from the computer. As the computer sends this digital signal to the speaker then the oscillator rotates accordingly. Much like the pin sitting in the groove on a spinning LP record, the rotation of this oscillator creates sound.</p>
      <h4>Sample rate</h4>
      <p>In contrast with continuous analog signals, digital signals are a discrete sequence of samples. Each sample represents a tiny slice of sound correlating with the oscillator's position at one moment. The oscillator must rotate at the same speed as real sound waves to work, between 20 to 20,000 times per second. Digital audio systems usually sample at a rate of 44,100 hertz to accommodate the range of human hearing.</p>
      <h4>Bit depth</h4>
      <p>Each digital sample has a range of possible values called its bit depth. Bit depth is kind of like the number of pixels in a photograph. A greater bit depth means a greater "resolution" of the audio slice. The nature of computer architecture makes this range span powers of two. For example, a CD track has a bit depth of 16 bits per sample, giving each sample a range of 2<sup>16</sup> or 65,536 values.</p>
      <h4>Parallel to Calculus</h4>
      <p>A set of digital samples put together in sequence closely approximates a sound wave in the real world. As signal rates and bit depths increase, so does the quality of the sound represented by the signal. As their sample rates and bit depths approach infinity, digital signals can model any and every sound that can possibly exist.</p>
      <p>This piecewise manner that digital signals model analog signals bears remarkable resemblance to the Fundamental Theorem of Calculus. In this webspace, I will define concepts of rhythm, tone, and harmony in terms of mathematical computation.</p>-->
      <h3>Example Program</h3>
      <h5><span class="glyphicon glyphicon-time"></span> Post by Jesse</h5>
      <p>The following program demonstrates arithmetic sound synthesis with JavaScript. It calculates a ten-second sine wave and sends it to the browser as a file download. Without encoding it in a media container such as <A href="http://soundfile.sapp.org/doc/WaveFormat/">WAV</a> or <a href="https://www.matroska.org/technical/guides/faq/index.html">MKA</a>, the data is uncompressed "Pulse Code Modulation." One can play it back now by downloading <a href="https://sourceforge.net/projects/audacity/">Audacity 2.1.0</a>, selecting File \ Import \ Data, choosing the PCM output file from the "Run example" button below, and entering these parameters:
      <br/><br/>Encoding: Signed 16 bit PCM
      <br/>Byte order: Little-endian
      <br/>Channels: 1 Channel (Mono)
      <br/>Start offset: 0 bytes
      <br/>Amount to import: 100%
      <br/>Sample rate: 44100 Hz
      <br/></p>
      <p><br/><button onClick="demo1();">Run example</button> *Works in the latest version of Mozilla Firefox</p>
      <p><br/></p>
      <h4>Source Code</h4>
      <p> </p>
      <p>
      <div class="codebox">
      <br/>&lt;script&gt;<br/>
      <br/>// title: PCM demo
      <br/>// author: Jesse Wiesenborn
      <br/>// date: 9/6/2018
      <br/>// version 0.1
      <br/>
      <br/>//
      <br/>// Calculate a ten-second sine wave at 440 Hz in a signed
      <br/>// 16-bit array, then save it to a PCM data file.
      <br/>//
      <br/>function demo1() {
      <br/><font class="tab1">  var samplingRate = 44100;</font>
      <br/><font class="tab1">    var bitDepth = 65535 / 2;</font>
      <br/><font class="tab1">    var frequency = 440;</font>
      <br/><font class="tab1">    var durationInSeconds = 10;</font>
      <br/><font class="tab1">    var lpcm16 = new Int16Array(samplingRate * durationInSeconds);</font>
      <br/><font class="tab1">    for (i = 0; i < lpcm16.length; i++) {</font>
      <br/><font class="tab2">      lpcm16[i] = Math.sin((Math.PI * 2 * i * frequency) / samplingRate) * bitDepth; }</font>
      <br/><font class="tab1">    download('demo.pcm',signedInt16ArrayToUnsigned(lpcm16)); }</font>
      <br/>
      <br/>//
      <br/>// Convert a signed 16-bit array to unsigned 16-bit integers,
      <br/>// then to hexadecimal byte format.
      <br/>//
      <br/>function signedInt16ArrayToUnsigned(arr) {
      <br/><font class="tab1">  var returnString = "";</font>
      <br/><font class="tab1">  for (i = 0; i < arr.length; i++) {</font>
      <br/><font class="tab2">    sample = arr[i];</font>
      <br/><font class="tab2">    if (sample >= 0) {</font>
      <br/><font class="tab3">      var r = integerToByte_LittleEndian(sample); }</font>
      <br/><font class="tab2">    else if (sample < 0) {</font>
      <br/><font class="tab3">      sample = sample + 65536; </font>
      <br/><font class="tab3">      var r = integerToByte_LittleEndian(sample); }</font>
      <br/><font class="tab2">    returnString = returnString.concat(r); }</font>
      <br/><font class="tab1">  return returnString; }</font>
      <br/>
      <br/>//
      <br/>// Convert one 16-bit integer to hexadecimal bytes, little-endian,
      <br/>// and append leading %s for the URI stream encoding.
      <br/>//
      <br/>function integerToByte_LittleEndian(s) {
      <br/><font class="tab1">  var doubleCheck = s;</font>
      <br/><font class="tab1">  var int1 = s % 16;</font>
      <br/><font class="tab1">  s = parseInt(s / 16);</font>
      <br/><font class="tab1">  var int2 = s % 16;</font>
      <br/><font class="tab1">  s = parseInt(s / 16);</font>
      <br/><font class="tab1">  var int3 = s % 16;</font>
      <br/><font class="tab1">  s = parseInt(s / 16);</font>
      <br/><font class="tab1">  var int4 = s % 16;</font>
      <br/><font class="tab1">  s = parseInt(s / 16); </font>
      <br/><font class="tab1">  return "%" + intToHex(int2) + intToHex(int1) + "%" + intToHex(int4) + intToHex(int3); }</font>

      <br/>
      <br/>//
      <br/>// Convert an integer in the range [0,15] to hexadecimal.
      <br/>//
      <br/>function intToHex(n) {
      <br/><font class="tab1">  if (n < 10) {</font>
      <br/><font class="tab2">    if (n >= 0) {</font>
      <br/><font class="tab3">      return n.toString(); }</font>
      <br/><font class="tab2">    else { alert("Error: intToHex(" + n + ")"); } }</font>
      <br/><font class="tab1">  switch (n) {</font>
      <br/><font class="tab2">    case 10:</font>
      <br/><font class="tab3">      var r = "a";</font>
      <br/><font class="tab3">      break;</font>
      <br/><font class="tab2">    case 11:</font>
      <br/><font class="tab3">      var r = "b";</font>
      <br/><font class="tab3">      break;</font>
      <br/><font class="tab2">    case 12:</font>
      <br/><font class="tab3">      var r = "c";</font>
      <br/><font class="tab3">      break;</font>
      <br/><font class="tab2">    case 13:</font>
      <br/><font class="tab3">      var r = "d";</font>
      <br/><font class="tab3">      break;</font>
      <br/><font class="tab2">    case 14:</font>
      <br/><font class="tab3">      var r = "e";</font>
      <br/><font class="tab3">      break;</font>
      <br/><font class="tab2">    case 15:</font>
      <br/><font class="tab3">      var r = "f";</font>
      <br/><font class="tab3">      break;</font>
      <br/><font class="tab2">    default:</font>
      <br/><font class="tab3">      alert("Error: intToHex(" + n + ")");</font>
      <br/><font class="tab3">      break; }</font>
      <br/><font class="tab1">  return r; }</font>
      <br/>  
      <br/>//
      <br/>// Send the data in a URI stream to a downloadable file.
      <br/>// Source: https://stackoverflow.com/questions/2897619/using-html5-javascript-to-generate-and-save-a-file  
      <br/>//
      <br/>function download(filename, data) {
      <br/><font class="tab1">  var pom = document.createElement('a');</font>
      <br/><font class="tab1">  pom.setAttribute('href', 'data:audio/pcm;charset=utf-8,' + data);</font>
      <br/><font class="tab1">  pom.setAttribute('download', filename);</font>
      <br/><font class="tab1">  if (document.createEvent) {</font>
      <br/><font class="tab2">    var event = document.createEvent('MouseEvents');</font>
      <br/><font class="tab2">    event.initEvent('click', true, true);</font>
      <br/><font class="tab2">    pom.dispatchEvent(event); }</font>
      <br/><font class="tab1">  else {</font>
      <br/><font class="tab2">    pom.click(); } }</font>
      <br/><br/>&lt;/script&gt;<br/><br/>
      </div>
      <!--<h4>Harmonic Computation</h4>
      <p>The program above renders a sound at only one frequency, devoid of overtones, intervals, or timbre. How can one sequence of data ever play anything more? Think back to the pin sitting in the groove of a spinning LP: one pin, many sounds. If a pin can do it, then so can the oscillator in a computer speaker.</p>
      <p>Imagine how music collides in real space. It is waves in the air around us through which we perceive sound. Sounds from any number of strings, instruments, or voices cause gas molecules to ricochet around each other until coalescing into a unified wave. As we shall demonstrate mathematically, this composite wave equals the sum of its sub-waves.</p>
      <p>For a visual idea, suppose you have a fiddle with only one string. A musician could make it sound different notes by plucking the string at different lengths. Playing different notes in arpeggiation will make it sound like a chord; as you increase the speed of arpeggiation, then it will sound more and more like multiple strings are playing. Now suppose the fiddle is being played by a robot who can play infinitely fast. As its rate of arpeggiation approaches the molecular density of the chamber, <i>the sound from a one-stringed fiddle becomes indiscernible from the sound of a whole orchestra.</i> The robot is in your computer.</p>
      <p>For example let us sum a chord of sine waves. First we may compute three different tones in three different memory streams. Then we will sum the three calculations with a pixel-to-pixel derivative from each one. Afterwards then we will solve it another way using calculus.</p>-->
      
    </div>
  </div>
</div>

</body>
</html>

<script>

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

// title: PCM demo
// author: Jesse Wiesenborn
// date: 9/6/2018
// version 0.2

//
// Calculate a ten-second sine wave at 440 Hz in a signed
// 16-bit array, then save it to a PCM data file.
//
function demo1() {
  var samplingRate = 44100;
  var bitDepth = 65535 / 2;
  var frequency = 440;
  var durationInSeconds = 10;
  var lpcm16 = new Int16Array(samplingRate * durationInSeconds);
  for (i = 0; i < lpcm16.length; i++) {
    lpcm16[i] = Math.sin((Math.PI * 2 * i * frequency) / samplingRate) * bitDepth; }
  download('demo.pcm',signedInt16ArrayToUnsigned(lpcm16)); }

//
// Convert a signed 16-bit array to unsigned 16-bit integers,
// then to hexadecimal byte format.
//
function signedInt16ArrayToUnsigned(arr) {
  var returnString = "";
  for (i = 0; i < arr.length; i++) {
    sample = arr[i];
    if (sample >= 0) {
      var r = integerToByte_LittleEndian(sample); }
    else if (sample < 0) {
      sample = sample + 65536; // (16^4)
      var r = integerToByte_LittleEndian(sample); }
    returnString = returnString.concat(r); }
  return returnString; }

//
// Convert one 16-bit integer to hexadecimal bytes, big-endian,
// and append leading %s for the URI stream encoding.
// 
function integerToByte_BigEndian(s) {
  var doubleCheck = s;
  var int4 = s % 16;
  s = parseInt(s / 16);
  var int3 = s % 16;
  s = parseInt(s / 16);
  var int2 = s % 16;
  s = parseInt(s / 16);
  var int1 = s % 16;
  s = parseInt(s / 16); 
  //
  // Make sure the hexadecimal-converted value equals the original value.
  //if (doubleCheck != validate(int1, int2, int3, int4)) {
  //  alert("Failure: integerToByte_BigEndian(" + s + ") != " + validate(int1, int2, int3, int4) + "."); }
  //
  return "%" + intToHex(int1) + intToHex(int2) + "%" + intToHex(int3) + intToHex(int4); }

//
// Convert one 16-bit integer to hexadecimal bytes, little-endian,
// and append leading %s for the URI stream encoding.
// 
function integerToByte_LittleEndian(s) {
  var doubleCheck = s;
  var int1 = s % 16;
  s = parseInt(s / 16);
  var int2 = s % 16;
  s = parseInt(s / 16);
  var int3 = s % 16;
  s = parseInt(s / 16);
  var int4 = s % 16;
  s = parseInt(s / 16); 
  return "%" + intToHex(int2) + intToHex(int1) + "%" + intToHex(int4) + intToHex(int3); }

//
// Convert an integer in the range [0,15] to hexadecimal.
//
function intToHex(n) {
  if (n < 10) {
    if (n >= 0) {
      return n.toString(); }
    else { alert("Error: intToHex(" + n + ")"); } }
  switch (n) {
    case 10:
      var r = "a";
      break;
    case 11:
      var r = "b";
      break;
    case 12:
      var r = "c";
      break;
    case 13:
      var r = "d";
      break;
    case 14:
      var r = "e";
      break;
    case 15:
      var r = "f";
      break;
    default:
      alert("Error: intToHex(" + n + ")");
      break; }
  return r; }
  
//
// Send the data in a URI stream to a downloadable file.
// Source: https://stackoverflow.com/questions/2897619/using-html5-javascript-to-generate-and-save-a-file  
//
function download(filename, data) {
  var pom = document.createElement('a');
  pom.setAttribute('href', 'data:audio/pcm;charset=utf-8,' + data);
  pom.setAttribute('download', filename);
  if (document.createEvent) {
    var event = document.createEvent('MouseEvents');
    event.initEvent('click', true, true);
    pom.dispatchEvent(event); }
  else {
    pom.click(); } }

//
// Verify the unsigned byte computes back to the correct integer.
//
//function validate(w,x,y,z) {
//  var w = w * 16 * 16 * 16;
//  var x = x * 16 * 16;
//  var y = y * 16;
//  return w + x + y + z; }

</script>