<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
</head>
<body>
<div>
      <h4><small>TIMBRE</small></h4>
      <hr>
      <h3>Timbre</h3>
      <h5><span class="glyphicon glyphicon-time"></span> Post by Jesse, 24 February</h5>
      <p>Timbre is really just a form of dissonance. The "sine wave" sounds ugly, and turning it into a triad didn't help very much. How can we round out the voice of this instrument?</p>
      <p>The first way to do this is by creating an envelope to shape the note's volume as a function of time. <!-- Ideally, we should be graphing this to visualize the form anyway.--> First, let's draw a graph of the <a href="triad.htm">A Triad</a> equation to get a better look at it:</p>
       <p align='center'><canvas id="dietCanvas" width="500" height="120" style="border:1px dashed #888888;"></canvas><br/>Graph of the <a href="triad.htm">A Triad</a> sine wave on HTML5 Canvas</p>
	
      <!-- <p><br/><button onClick="demo1();">Run example</button> *Works in the latest version of Mozilla Firefox</p> -->
      <!-- <p>Resource: https://www.w3schools.com/html/html5_canvas.asp</p> -->
</div>
</body>
</html>
<script>
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

// title: pcm easel
// author: jesse wiesenborn
// date: 2/24/2019
// version 0.1

// Initialize sound variables
var samplingRate = 44100;
var bitDepth = 65535 / 2;
var frequency1 = 440.00;
var frequency2 = 554.37;
var frequency3 = 659.26;
var durationInSeconds = 10;
var lpcm16 = new Int16Array(samplingRate * durationInSeconds);

// Initialize the canvas and brush objects
var canvas = document.getElementById("dietCanvas");
var brush = canvas.getContext("2d");
//var drawX = 0;
//var drawY = 0;
var canWidth = parseInt(canvas.width);
var canHeight = parseInt(canvas.height / 2);
//alert(beginX + ', ' + beginY);
var graphX = 0;
var graphY = 0;

dietCalc(); // calculate equation array
drawWave();
// Draw the equation onto the canvas
function drawWave() {
  brush.beginPath();
  brush.lineWidth = '1';
  var lineLength = lpcm16.length;
  var delta = lineLength / canWidth;
  brush.moveTo(0, canHeight + lpcm16[0]);
  for (x = 0; x < canWidth; x++) {
    var dx = parseInt(x * delta);
    var drawX = dx;
    var drawY = parseInt((lpcm16[dx] / 65536) * canHeight * 2) + canHeight;
    brush.lineTo(x, drawY);
    //alert(x + ':' + dx + ': (' + drawX + ', ' + drawY + ')');
  } 
  //brush.moveTo(10, 80);
  //brush.lineTo(20,70);
  //brush.lineTo(30,66);

  brush.stroke();
}

//
// Calculate a five-second A triad and
// store it in the signed 16-bit array
//
function dietCalc() {
  
  for (i = 0; i < lpcm16.length; i++) {
    lpcm16[i] = (
      (Math.sin((Math.PI * 2 * i * frequency1) / (samplingRate)) / 3 ) + 
      (Math.sin((Math.PI * 2 * i * frequency2) / (samplingRate)) / 3 ) + 
      (Math.sin((Math.PI * 2 * i * frequency3) / (samplingRate)) / 3 )
    ) * bitDepth; }
  //download('triad.pcm',signedInt16ArrayToUnsigned(lpcm16)); 
  //return(lpcm16);
  }
//
// Convert a signed 16-bit array to unsigned 16-bit integers,
// then to hexadecimal byte format.
//
function signedInt16ArrayToUnsigned(arr) {
  var returnString = "";
  for (i = 0; i < arr.length; i++) {
    sample = arr[i];
    if (sample >= 0) {
      var r = integerToByte_LittleEndian(sample); }
    else if (sample < 0) {
      sample = sample + 65536; // (16^4)
      var r = integerToByte_LittleEndian(sample); }
    returnString = returnString.concat(r); }
  return returnString; }

//
// Convert one 16-bit integer to hexadecimal bytes, big-endian,
// and append leading %s for the URI stream encoding.
// 
function integerToByte_BigEndian(s) {
  var doubleCheck = s;
  var int4 = s % 16;
  s = parseInt(s / 16);
  var int3 = s % 16;
  s = parseInt(s / 16);
  var int2 = s % 16;
  s = parseInt(s / 16);
  var int1 = s % 16;
  s = parseInt(s / 16); 
  //
  // Make sure the hexadecimal-converted value equals the original value.
  //if (doubleCheck != validate(int1, int2, int3, int4)) {
  //  alert("Failure: integerToByte_BigEndian(" + s + ") != " + validate(int1, int2, int3, int4) + "."); }
  //
  return "%" + intToHex(int1) + intToHex(int2) + "%" + intToHex(int3) + intToHex(int4); }

//
// Convert one 16-bit integer to hexadecimal bytes, little-endian,
// and append leading %s for the URI stream encoding.
// 
function integerToByte_LittleEndian(s) {
  var doubleCheck = s;
  var int1 = s % 16;
  s = parseInt(s / 16);
  var int2 = s % 16;
  s = parseInt(s / 16);
  var int3 = s % 16;
  s = parseInt(s / 16);
  var int4 = s % 16;
  s = parseInt(s / 16); 
  return "%" + intToHex(int2) + intToHex(int1) + "%" + intToHex(int4) + intToHex(int3); }

//
// Convert an integer in the range [0,15] to hexadecimal.
//
function intToHex(n) {
  if (n < 10) {
    if (n >= 0) {
      return n.toString(); }
    else { alert("Error: intToHex(" + n + ")"); } }
  switch (n) {
    case 10:
      var r = "a";
      break;
    case 11:
      var r = "b";
      break;
    case 12:
      var r = "c";
      break;
    case 13:
      var r = "d";
      break;
    case 14:
      var r = "e";
      break;
    case 15:
      var r = "f";
      break;
    default:
      alert("Error: intToHex(" + n + ")");
      break; }
  return r; }
  
//
// Send the data in a URI stream to a downloadable file.
// Source: https://stackoverflow.com/questions/2897619/using-html5-javascript-to-generate-and-save-a-file  
//
function download(filename, data) {
  var pom = document.createElement('a');
  pom.setAttribute('href', 'data:audio/pcm;charset=utf-8,' + data);
  pom.setAttribute('download', filename);
  if (document.createEvent) {
    var event = document.createEvent('MouseEvents');
    event.initEvent('click', true, true);
    pom.dispatchEvent(event); }
  else {
    pom.click(); } }

//
// Verify the unsigned byte computes back to the correct integer.
//
//function validate(w,x,y,z) {
//  var w = w * 16 * 16 * 16;
//  var x = x * 16 * 16;
//  var y = y * 16;
//  return w + x + y + z; }

</script>