<!DOCTYPE html>
<html lang="en">
<head>
  <title>Diet Pumpkin Machine</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
  <style>
    /* Set height of the grid so .sidenav can be 100% (adjust if needed) */
    .row.content {height: 720px}
    
    /* Set gray background color and 100% height */
    .sidenav {
      background-color: #f1f1f1;
      height: 100%;
    }
    
    /* Set black background color, white text and some padding */
    footer {
      background-color: #555;
      color: white;
      padding: 15px;
    }
    
    /* On small screens, set height to 'auto' for sidenav and grid */
    @media screen and (max-width: 767px) {
      .sidenav {
        height: auto;
        padding: 15px;
      }
      .row.content {height: auto;} 
    }
    
    /* Tab code from https://www.computerhope.com/issues/ch001034.htm */
    .tab1 { margin-left: 2em; }
    .tab2 { margin-left: 4em; }
    .tab3 { margin-left: 6em; }
    
    .codebox {
    font-family: monospace;
    font-size: 9pt;
    color: blue;
    background-color: cornsilk;
    width: 70%;
    border: 1px;
    }
    
  </style>
</head>
<body>

<div class="container-fluid">
  <div class="row content">
    <div class="col-sm-3 sidenav">
      <h4>Diet Pumpkin Machine</h4>
      <ul class="nav nav-pills nav-stacked">
        <li><a href="index.htm">Home</a></li>
        <li><a href="pcm.htm">Pulse Code Modulation</a></li>
        <li><a href="demo.htm">Demo 0.1</a></li>
        <li class="active"><a href="nonmusic.htm">Nonmusic</a></li>
      </ul><br>
    </div>

    <div class="col-sm-9">
      <h4><small>ANTIMUSIC</small></h4>
      <hr>
      <h3>Nonmusic</h3>
      <h5><span class="glyphicon glyphicon-time"></span> Post by jesse, Sep 5, 2018.</h5>
      <p>One of my friends told me the other day that she doesn't like my hobby. "It sounds more like noise than music," she said. "There's no melody, harmony, or human emotion. You're not having any fun with it." I argued that this isn't an institution for tempering crowds, but a medium for the presence of mind.</p>
      <!-- <p>The following program performs arithmetic sound synthesis with ECMAScript. For now we can play it back by downloading <a href="https://sourceforge.net/projects/audacity/">Audacity 2.1.0</a>, selecting <b>File</b> ⭢ <b>Import</b> ⭢ <b>Raw Data</b>, selecting the downloaded PCM file, and entering these parameters:
      <br/><br/>Encoding: Signed 16 bit PCM
      <br/>Byte order: Big-endian
      <br/>Channels: 1 Channel (Mono)
      <br/>Start offset: 0 bytes
      <br/>Amount to import: 100%
      <br/>Sample rate: 44100 Hz
      <br/></p> -->
      <p><br/><button onClick="nonmusic();">Nonmusic 0.1</button> *Works in the latest version of Mozilla Firefox</p>
      <p><br/></p>
      </div>
      </p>
    </div>
  </div>
</div>

<footer class="container-fluid">
  <p>Jesse Wiesenborn</p>
</footer>

</body>
</html>

<script>

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

// title: Nonmusic
// author: Jesse Wiesenborn
// date: 9/5/2018
// version 0.1

// 
// 
// 
// 
// 
function nonmusic() {
  var samplingRate = 44100;
  var bitDepth = 65535 / 2;
  //var negativeBitDepth = (bitDepth * -1);
  var frequency1 = 440;
  var frequency2 = 161.88;
  var durationInSeconds = 10;
  var lpcm16bit = new Int16Array(samplingRate * durationInSeconds);
  var lpcm1 = 0; //new Int16Array(samplingRate * durationInSeconds); //can't use int16 type for these because of over/underflow.
  var lpcm2 = 0; //new Int16Array(samplingRate * durationInSeconds); //
  for (i = 0; i < lpcm16bit.length; i++) {
    lpcm1 = Math.sin((Math.PI * 2 * i * frequency1) / samplingRate) * bitDepth; 
    lpcm2 = Math.sin((Math.PI * 2 * i * frequency2) / samplingRate) * bitDepth; 
    var streamSum = addStreams(lpcm1, lpcm2, bitDepth);
    lpcm16bit[i] = streamSum;
    }
  download('demo.pcm',signedInt16ArrayToUnsigned(lpcm16bit)); }
  
// Add two streams
//
// using the "bounceback" theory of additive synth.
// If a value exceeds the boundary of a 16-bit value, then we correct
// it to a subtraction of the bitDepth minus the overflow in the
// case of positive sign, or as an addition of the negative bitDepth
// plus the underflow in the case of negative sign.
//
function addStreams(lpcm1, lpcm2, bitDepth) {
  var s = lpcm1 + lpcm2;
  var negativeBitDepth = (bitDepth * -1);
  if (s > bitDepth) {
      var overflow = s - bitDepth;
      s = bitDepth - overflow;
      //alert("Sample exceeded bit depth " + bitDepth + " by " + overflow + " totaling a value of " + s);
      }
    //  var anomaly = lpcm16_0[i];
    //  var overflow = (lpcm16_0[i] - bitDepth);
    //  lpcm16_0[i] = bitDepth - overflow; 
    //  lpcm16_0[i] = lpcm16_0[i] * -1;
    //  alert(anomaly + " was corrected to " + lpcm16_0[i]); }
  else if (s < negativeBitDepth) {
    var underflow = s - negativeBitDepth;
    s = negativeBitDepth - underflow;
    //  lpcm16_0[i] = negativeBitDepth + underflow; 
    //  lpcm16_0[i] = lpcm16_0[i] * -1; 
    //  alert(anomaly + " was corrected to " + lpcm16_0[i]); }
    //alert("Sample receeded bit depth " + negativeBitDepth + " by " + underflow + " totaling a value of " + s);
    }
  return s; }
//
// Convert a signed 16-bit array to unsigned 16-bit integers,
// then to hexadecimal byte format.
//
function signedInt16ArrayToUnsigned(arr) {
  var returnString = "";
  for (i = 0; i < arr.length; i++) {
    sample = arr[i];
    if (sample >= 0) {
      var r = integerToByte_BigEndian(sample); }
    else if (sample < 0) {
      sample = sample + 65536; // (16^4)
      var r = integerToByte_BigEndian(sample); }
    returnString = returnString.concat(r); }
  return returnString; }

//
// Convert one 16-bit integer to hexadecimal bytes, big-endian,
// and append leading %s for the URI stream encoding.
// 
function integerToByte_BigEndian(s) {
  var doubleCheck = s;
  var int4 = s % 16;
  s = parseInt(s / 16);
  var int3 = s % 16;
  s = parseInt(s / 16);
  var int2 = s % 16;
  s = parseInt(s / 16);
  var int1 = s % 16;
  s = parseInt(s / 16); 
  //
  // Make sure the hexadecimal-converted value equals the original value.
  //if (doubleCheck != validate(int1, int2, int3, int4)) {
  //  alert("Failure: integerToByte_BigEndian(" + s + ") != " + validate(int1, int2, int3, int4) + "."); }
  //
  return "%" + intToHex(int1) + intToHex(int2) + "%" + intToHex(int3) + intToHex(int4); }

//
// Convert an integer in the range [0,15] to hexadecimal.
//
function intToHex(n) {
  if (n < 10) {
    if (n >= 0) {
      return n.toString(); }
    else { alert("Error: intToHex(" + n + ")"); } }
  switch (n) {
    case 10:
      var r = "a";
      break;
    case 11:
      var r = "b";
      break;
    case 12:
      var r = "c";
      break;
    case 13:
      var r = "d";
      break;
    case 14:
      var r = "e";
      break;
    case 15:
      var r = "f";
      break;
    default:
      alert("Error: intToHex(" + n + ")");
      break; }
  return r; }
  
//
// Send the data in a URI stream to a downloadable file.
// Source: https://stackoverflow.com/questions/2897619/using-html5-javascript-to-generate-and-save-a-file  
//
function download(filename, data) {
  var pom = document.createElement('a');
  pom.setAttribute('href', 'data:audio/pcm;charset=utf-8,' + data);
  pom.setAttribute('download', filename);
  if (document.createEvent) {
    var event = document.createEvent('MouseEvents');
    event.initEvent('click', true, true);
    pom.dispatchEvent(event); }
  else {
    pom.click(); } }

//
// Verify the unsigned byte computes back to the correct integer.
//
//function validate(w,x,y,z) {
//  var w = w * 16 * 16 * 16;
//  var x = x * 16 * 16;
//  var y = y * 16;
//  return w + x + y + z; }

</script>