<!DOCTYPE html>
<html lang="en">
<head>
  <title>Diet Pumpkin Machine</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
  <style>
    /* Set height of the grid so .sidenav can be 100% (adjust if needed) */
    .row.content {height: 720px}
    
    /* Set gray background color and 100% height */
    .sidenav {
      background-color: #f1f1f1;
      height: 100%;
    }
    
    /* Set black background color, white text and some padding */
    footer {
      background-color: #555;
      color: white;
      padding: 15px;
    }
    
    /* On small screens, set height to 'auto' for sidenav and grid */
    @media screen and (max-width: 767px) {
      .sidenav {
        height: auto;
        padding: 15px;
      }
      .row.content {height: auto;} 
    }
    
    /* Tab code from https://www.computerhope.com/issues/ch001034.htm */
    .tab1 { margin-left: 2em; }
    .tab2 { margin-left: 4em; }
    .tab3 { margin-left: 6em; }
    
    .codebox {
    font-family: monospace;
    font-size: 9pt;
    color: blue;
    background-color: cornsilk;
    width: 70%;
    border: 1px;
    }

}
    
  </style>
</head>
<body>

<div class="container-fluid">
  <div class="row content">
    <div class="col-sm-3 sidenav">
      <h4>Diet Pumpkin Machine</h4>
      <ul class="nav nav-pills nav-stacked">
        <li><a href="index.htm">Home</a></li>
        <li><a href="theory.htm">Computer Music Theory</a></li>
        <li><a href="program.htm">Example Program</a></li>
        <li><a href="harmony.htm">Harmonic Computation</a></li>
        <li><a href="frequency.htm">The Frequency Equation</a></li>
        <li><a href="triad.htm">A Triad</a></li>
        <li><a href="timbre.htm">Wave Graph</a></li>
        <li><a href="tone.htm">Tone</a></li>
        <li><a href="sequences.htm">Sequences</a></li>
        <li><a href="wave.htm">The WAV format</a></li>
        <li><a href="offsets.htm">Offsets (Sequences Part 2)</a></li>
        <li class="active"><a href="musicxml.htm">MusicXML</a></li>
      </ul><br>
    </div>

    <div class="col-sm-9">
      <h4><small>MUSIC XML</small></h4>
      <hr>
      <h3>Music XML</h3>
      <p><h5><span class="glyphicon glyphicon-time"></span> Post by Jesse, 15 April 2019</h5></p>
      <p>Now that we have something to play sequences of notes, we need a way to code and decode note sequences. The data language XML turns out to be a great format for web applications. Web browsers already work with XML as hypertext webpages and it's globally standardized.</p>
      <!--<p>I wrote my own XML parser in ECMAScript last year but it was <a href="musicXMLparser.js">sloppy</a>. Let's review the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction">Document Object Model</a> this time and take advantage of the built-in browser functionality.</p> 
      <br/>
      <p><h5><span class="glyphicon glyphicon-time"></span> Update by Jesse, 20 April 2019</h5></p>-->
      <p>There's a promising example at W3schools on <A href="https://www.w3schools.com/xml/xml_parser.asp">parsing XML documents</a>. There is also some useful syntax about <a href="https://www.w3schools.com/xml/dom_nodes_traverse.asp">traversing the node tree</a>. The first file we're going to process is a MusicXML document that Dr. Vanderburg kindly provided last year. </p>
      <p></p>
	  <!--<p><button onclick='dietCalc()'>Download</button> *Requires the latest version of Mozilla Firefox</p>-->
      <p id='XMLconsole'></p>
    </div>
  </div>
</div>

</body>
</html>

<script>

// title: musicXML decoder
// author: jesse wiesenborn
// date: 4/20/2019
// version 0.7

// Make an object
//var dpm = new Object();
//https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction

//Open a source XML file
var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
    dpmFunction(this);
    }
};
xhttp.open("GET", "A_Sigh_20180125-b.xml", true);
xhttp.send();

//Put file in XML DOM object
function dpmFunction(xml) {
    //var xmlDoc = xml.responseXML;
    //document.getElementById("musicXMLoutput").innerHTML =
    //xmlDoc.getElementsByTagName("measure")[0].childNodes[0].nodeValue;
    // paragraphs[0] is the first <p> element
    // paragraphs[1] is the second <p> element, etc.
    //document.getElementById("musicXMLoutput").innerHTML =+ paragraphs[0].nodeName.toString();
    //alert(paragraphs[0].nodeName.toString());
    
    var xmlDoc = xml.responseXML;
    var txt = "";
    
    //Find parts
    var parts = xmlDoc.getElementsByTagName("part");
    for (i = 0; i < parts.length; i++) {
      //txt += parts[i].childNodes[0].nodeValue + "<br>";
      txt += parts[i].id + "<br>";
      
      
        //x = xmlDoc.documentElement.childNodes;
        x = parts[i].childNodes;
	for (j = 0; j < x.length; j++) {
	    //txt += x[j].nodeName + ": <br>";// + x[j].childNodes[0].nodeValue + "<br>";
	    if (x[j].nodeName == 'measure') {
	        var measure = x[j].childNodes;
	        txt += "measure: ";
	        for (k = 0; k < measure.length; k++) {
	            //txt += measure[k].nodeName + ": ";
	            //txt += measure[k].nodeValue + "<br>";
	            if (measure[k].nodeName == 'note') {
	                var note = measure[k].childNodes;
	                txt += "note: {";
	                for (l = 0; l < note.length; l++) {
	                    //txt += note[l].nodeName + ": ";
	                    
	                    if (note[l].nodeName == 'pitch') {
	                        //txt += "pitch: ";
	                        var pitch = note[l].childNodes;
	                        
	                        for (m = 0; m < pitch.length; m++) {
	                            if (pitch[m].nodeName == 'step') {
	                                txt += "step: ";
	                                txt += pitch[m].innerHTML;
	                                txt += "; ";
	                            }
	                            else if (pitch[m].nodeName == 'alter') {
	                                txt += "alter: ";
	                                txt += pitch[m].innerHTML;
	                                txt += "; ";
	                            }
	                            else if (pitch[m].nodeName == 'octave') {
	                                txt += "octave: ";
	                                txt += pitch[m].innerHTML;
	                                txt += "; ";
	                            }
	                            
	                        }
	                        //txt += "; ";
	                        //txt += pitch[0].nodeName + ": "
	                        //txt += pitch[0].nodeValue;// + "<br>";
	                    
	                    }
	                    //else if (note[l].nodeName == 'type') {
	                    //    txt += "type: ";
	                    //    var noteType = note[l].innerHTML;
	                    //    txt += noteType;
				//txt += "; ";
	                    //}
	                    else if (note[l].nodeName == 'voice') {
	                        txt += "voice: ";
	                        var noteType = note[l].innerHTML;
	                        txt += noteType;
				txt += "; ";
	                    }
	                    else if (note[l].nodeName == 'duration') {
	                        txt += "duration: ";
	                        var noteType = note[l].innerHTML;
	                        txt += noteType;
				txt += "; ";
	                    }
	                    else if (note[l].nodeName == 'rest') {
	                        txt += "rest; ";
	                    }
	                    //txt += note[l].nodeValue + "<br>";
	                    //txt += "<br>";
	                }
	                txt += "} ";
	            }
	        }
	        //txt += x[j].type + "<br>";
	        txt += "<br>";
	    }
	    
	}
      
      //Find notes in each part.
      //var partChildNodes = parts[i].childNodes; //count the number of child nodes
      //for (j = 0; j < partChildNodes.length; j++) { //iterate through each node
        ///////var node = xmlDoc.getElementsByTagName("part")[i].childNodes[j]; //read the node
        //var notes = partChildNodes.getElementsByTagName("note");
        //var partNotes = xmlDoc.getElementsByTagName("part")[i].getElementsByTagName("note");
        //var n=node.nodeValue;
        //var n = partNotes.nodeValue;
        
        
        //Find elements of each note (step, octave, type)
        //var noteChildNodes = partNotes[j].childNodes;
        //for (k = 0; k < partNotes.length; k++) { //iterate through each note
          //txt += noteChildNodes[k].nodeName + ": ";// + noteChildNodes[k].childNodes[0].nodeValue + "<br>";
        //var notePitch = partNotes[j].getElementsByTagName("pitch");
        //var noteType = partNotes[j].getElementsByTagName("type");
        
        //Assume a note has one pitch
        //var pitchStep = notePitch[0].getElementsByTagName("step");
        //var pitchOctave = notePitch[0].getElementsByTagName("octave");
        
        
        //txt += notePitch + "<br>";
        //txt += noteOctave + "<br>";
        //txt += noteType + "<br>";
        
        //xmlDoc.getElementsByTagName("measure")[j].childNodes[0].nodeValue;
        //}
      
    }
    
document.getElementById("XMLconsole").innerHTML = txt; 
}





// Global constants and objects
var samplingRate = 44100; // samples per second
var BitsPerSample = 16; //
var bitDepth = 65535 / 2; //((2 ^ BitsPerSample) - 1) / 2;
var durationInSeconds = 3;
var lpcm16 = new Int16Array(samplingRate * durationInSeconds);
var numchannel = 1;

var global_y_Offset = 0.000000; //vertical offset between notes
var global_direction = ""; //plus-or-minus semaphore
//
// Compute an XML sequence into a signed
// 16-bit array, then save it to a PCM data file.
//
function dietCalc() {
  var frequency = 0.00; //440.00; //hertz of the note to play
  //var volume = 0.01; //volume is a multiplier between 0 and 1
  var songDuration = lpcm16.length;
  
  var tempo = 100 / 60; //beats per second
  var noteDuration = samplingRate / tempo; //number of samples for one note at tempo
  
  //initialize
  var xOffset = 0; //temporal offset for notes in a sequence



  //for (i = 0; i < songDuration; i++) {
    //var changePitch = i / duration;
    //var a = pumpkinWave(i, frequency + changePitch(upDif));
    //var b = pumpkinWave(i, frequency - changePitch(lowDif));
	
	
  lpcm16.set(makeNote(440.00, noteDuration), 0);
  lpcm16.set(makeNote(493.88, noteDuration), noteDuration - 1);
  lpcm16.set(makeNote(554.37, noteDuration), (noteDuration * 2) - 2);
  lpcm16.set(makeNote(587.33, noteDuration), (noteDuration * 3) - 3);
  lpcm16.set(makeNote(659.26, noteDuration), (noteDuration * 4) - 4);
  
  //  }

  
  var outputFile = wavChunk(lpcm16.length) + fmtChunk() + dataChunk(lpcm16);
  download('song1.wav', outputFile); 
  
}

//compute one note given the parameters Frequency and Duration
function makeNote(noteFrequency, noteDuration) {
  var noteArray = new Int16Array(noteDuration); // array for one note	
  var yOffset = global_y_Offset;
  var xOffset = 0;
  if (global_direction == "+") {
    xOffset = 1;
	}
  else if (global_direction == "-") {
    xOffset = -1;
	}
  else {
    xOffset = 1;
    }	
	
  console.log(noteFrequency, xOffset, yOffset);	
  for (x = 0; x < noteDuration; x++) {
    
    var c = pumpkinWave(x, noteFrequency, xOffset, yOffset);
    noteArray[x] = c; // * v;
  }
  
  //set global semaphores for curve smoothening
  global_direction = determineUpOrDown(noteArray[x-2], noteArray[x-1]);
  global_y_Offset = noteArray[x-1] / bitDepth;
  console.log('slope ' + global_direction);
  console.log('offset=' + global_y_Offset + '; asin(offset)=' + Math.asin(global_y_Offset));
  return noteArray;
}

//See whether a curve is sloping upwards or downwards given two samples
function determineUpOrDown(a, b) {
  var dir = "";
  if (b > a) { // if the last two samples in the note are increasing, then the curve is going up.
	dir = "+";
  }
  else if (b < a) { // if the last two samples in the note are decreasing, then the curve is going down.
	dir = "-";
  }
  else if (a == b) { //If there is no curve, chances are the point is at the top or bottom of a curve...
	if (a > 0) { // so if it's above zero then the curve is probably going downward
	  dir = "-";
	}
	else if (a < 0) { // and if it's below zero then the curve is probably going upward
	  dir = "+";
	}
  }
  console.log("a=" + a + ", b=" + b + ", dir=" + dir);
  return dir;
}

//
//
function volumeShape(i, duration) {
  var v = (Math.cos(Math.PI * i / duration * .5));
  return v;
}

//
// demo
//
function pumpkinWave(i, frequency, xOffset, yOffset) {
  //var a = (Math.sin(((Math.PI * 2 * i * frequency) + (Math.asin(yOffset) * samplingRate) ) / samplingRate) ) * bitDepth; 
  var a = (Math.sin(((Math.PI * 2 * i * frequency) + (xOffset * (Math.asin(yOffset) * samplingRate))) / samplingRate) ) * xOffset * bitDepth; 
  return a;
}

//function pumpkinWave1(i, frequency, xOffset, yOffset) {
//  var a = (Math.sin(((Math.PI * 2 * i * frequency) + (Math.asin(yOffset) * samplingRate) ) / samplingRate) ) * bitDepth; 
//  //var a = (Math.sin(((Math.PI * 2 * i * frequency) + (xOffset * (Math.asin(yOffset) * samplingRate))) / samplingRate) ) * xOffset * bitDepth; 
//  return a;
//}

//function pumpkinWave2(i, frequency, xOffset, yOffset) {
//  //var a = (Math.sin(((Math.PI * 2 * i * frequency) + (Math.asin(yOffset) * samplingRate) ) / samplingRate) ) * bitDepth; 
 // var a = (Math.sin(((Math.PI * 2 * i * frequency) + (xOffset * (Math.asin(yOffset) * samplingRate))) / samplingRate) ) * xOffset * bitDepth; 
//  return a;
//}
//
// WAV File Format Encoding functions
//

// WAVE chunk
// integerToByte_LittleEndian returns a 2-Byte little-endian integer.
// integerTo4Byte_LittleEndian returns 4 bytes etc.
function wavChunk(dtlength) {
  var ChunkID = textTo4Byte_BigEndian("RIFF");
  var ChunkSize = integerTo4Byte_LittleEndian(36 + dtlength);
  var Format = textTo4Byte_BigEndian("WAVE");
  return (ChunkID + ChunkSize + Format);
}

// FORMAT chunk
//
function fmtChunk() {
  var Subchunk1ID = textTo4Byte_BigEndian("fmt ");
  var Subchunk1Size = integerTo4Byte_LittleEndian(16); //PCM
  var AudioFormat = integerToByte_LittleEndian(1); //Uncompressed
  var NumChannels = integerToByte_LittleEndian(numchannel); //Mono
  var SampleRate = integerTo4Byte_LittleEndian(samplingRate);
  var ByteRate = integerTo4Byte_LittleEndian(samplingRate * numchannel * (BitsPerSample/8)); //SampleRate * NumChannels
  var BlockAlign = integerToByte_LittleEndian(numchannel * (BitsPerSample/8));
  var bitsPerSampleEncoded = integerToByte_LittleEndian(BitsPerSample);
  return(Subchunk1ID + Subchunk1Size + AudioFormat + NumChannels + SampleRate + ByteRate + BlockAlign + bitsPerSampleEncoded);
}

// DATA chunk
function dataChunk(dt) {
  var Subchunk2ID = textTo4Byte_BigEndian("data");
  var Subchunk2Size = integerTo4Byte_LittleEndian(dt.length * numchannel * (BitsPerSample/8)); //# of bytes in the array
  //alert("DT length=" + dt.length);
  var Data = signedInt16ArrayToUnsigned(dt);
  return(Subchunk2ID + Subchunk2Size + Data);
}


// Initialize the canvas and brush objects
//var canvas = document.getElementById("dietCanvas");
//var brush = canvas.getContext("2d");
////var drawX = 0;
////var drawY = 0;
//var canWidth = parseInt(canvas.width);
//var canHeight = parseInt(canvas.height / 2);
////alert(beginX + ', ' + beginY);
//var graphX = 0;
//var graphY = 0;

///////////////////////////////////////
//dietCalc(); // calculate equation array
///////////////////////////////////////

//drawWave();
// Draw the equation onto the canvas
function drawWave() {
  brush.beginPath();
  brush.lineWidth = '1';
  var lineLength = lpcm16.length;
  var delta = lineLength / canWidth;
  brush.moveTo(0, canHeight + lpcm16[0]);
  for (x = 0; x < canWidth; x++) {
    var dx = parseInt(x * delta);
    var drawX = x;
    var drawY = parseInt((lpcm16[dx] / bitDepth) * canHeight) + canHeight;
    brush.lineTo(drawX, drawY);
    //alert(x + ':' + dx + ': (' + drawX + ', ' + drawY + ')');
  } 
  brush.stroke();
}

//
// Convert a signed 16-bit array to unsigned 16-bit integers,
// then to hexadecimal byte format.
//
function signedInt16ArrayToUnsigned(arr) {
  var returnString = "";
  for (i = 0; i < arr.length; i++) {
    sample = arr[i];
    if (sample >= 0) {
      var r = integerToByte_LittleEndian(sample); }
    else if (sample < 0) {
      sample = sample + 65536; // (16^4)
      var r = integerToByte_LittleEndian(sample); }
    returnString = returnString.concat(r); }
  return returnString; }

//
// Convert one 16-bit integer to hexadecimal bytes, big-endian,
// and append leading %s for the URI stream encoding.
// 
function integerToByte_BigEndian(s) {
  var doubleCheck = s;
  var int4 = s % 16;
  s = parseInt(s / 16);
  var int3 = s % 16;
  s = parseInt(s / 16);
  var int2 = s % 16;
  s = parseInt(s / 16);
  var int1 = s % 16;
  s = parseInt(s / 16); 
  //
  // Make sure the hexadecimal-converted value equals the original value.
  //if (doubleCheck != validate(int1, int2, int3, int4)) {
  //  alert("Failure: integerToByte_BigEndian(" + s + ") != " + validate(int1, int2, int3, int4) + "."); }
  //
  return "%" + intToHex(int1) + intToHex(int2) + "%" + intToHex(int3) + intToHex(int4); }

//
// Convert one 16-bit integer to hexadecimal bytes, little-endian,
// and append leading %s for the URI stream encoding.
// 
function integerToByte_LittleEndian(s) {
  var doubleCheck = s;
  var int1 = s % 16;
  s = parseInt(s / 16);
  var int2 = s % 16;
  s = parseInt(s / 16);
  var int3 = s % 16;
  s = parseInt(s / 16);
  var int4 = s % 16;
  s = parseInt(s / 16); 
  return "%" + intToHex(int2) + intToHex(int1) + "%" + intToHex(int4) + intToHex(int3); }


// Data chunks are 4 bytes
// Convert one 16-bit integer to hexadecimal bytes, little-endian,
// and append leading %s for the URI stream encoding.
// 
function integerTo4Byte_LittleEndian(s) {
  //var doubleCheck = s;
  var int1 = s % 16;
  s = parseInt(s / 16);
  var int2 = s % 16;
  s = parseInt(s / 16);
  var int3 = s % 16;
  s = parseInt(s / 16);
  var int4 = s % 16;
  s = parseInt(s / 16); 
  var int5 = s % 16;
  s = parseInt(s / 16);
  var int6 = s % 16;
  s = parseInt(s / 16);
  var int7 = s % 16;
  s = parseInt(s / 16);
  var int8 = s % 16;
  s = parseInt(s / 16); 
  return "%" + intToHex(int2) + intToHex(int1) + "%" + intToHex(int4) + intToHex(int3)  
  + "%" + intToHex(int6) + intToHex(int5) + "%" + intToHex(int8) + intToHex(int7);
  }


//
// Convert an integer in the range [0,15] to hexadecimal.
//
function intToHex(n) {
  if (n < 10) {
    if (n >= 0) {
      return n.toString(); }
    else { alert("Error: intToHex(" + n + ")"); } }
  switch (n) {
    case 10:
      var r = "a";
      break;
    case 11:
      var r = "b";
      break;
    case 12:
      var r = "c";
      break;
    case 13:
      var r = "d";
      break;
    case 14:
      var r = "e";
      break;
    case 15:
      var r = "f";
      break;
    default:
      alert("Error: intToHex(" + n + ")");
      break; }
  return r; }
  
//
// Send the data in a URI stream to a downloadable file.
// Source: https://stackoverflow.com/questions/2897619/using-html5-javascript-to-generate-and-save-a-file  
//
function download(filename, data) {
  var pom = document.createElement('a');
  pom.setAttribute('href', 'data:audio/wav;charset=utf-8,' + data);
  pom.setAttribute('download', filename);
  if (document.createEvent) {
    var event = document.createEvent('MouseEvents');
    event.initEvent('click', true, true);
    pom.dispatchEvent(event); }
  else {
    pom.click(); } }

//File format blocks are two to four bytes.
//Convert a 4-character string to 4 bytes, big-endian
//Insert % sign for URI encoding.
function textTo4Byte_BigEndian(t) {
  t3 = t.charCodeAt(3);
  t2 = t.charCodeAt(2);
  t1 = t.charCodeAt(1);
  t0 = t.charCodeAt(0);
  
  //console.log(t3 + ';' + t2 + ';' + t1 + ';' + t0);

  var int8 = t3 % 16;
  t3 = parseInt(t3 / 16);
  var int7 = t3 % 16;
  t3 = parseInt(t3 / 16);
  var int6 = t2 % 16;
  t2 = parseInt(t2 / 16);
  var int5 = t2 % 16;
  t2 = parseInt(t2 / 16); 
  var int4 = t1 % 16;
  t1 = parseInt(t1 / 16);
  var int3 = t1 % 16;
  t1 = parseInt(t1 / 16);
  var int2 = t0 % 16;
  t0 = parseInt(t0 / 16);
  var int1 = t0 % 16;
  t0 = parseInt(t0 / 16); 
  
  return "%" + intToHex(int1) + intToHex(int2) + "%" + intToHex(int3) + intToHex(int4) 
  + "%" + intToHex(int5) + intToHex(int6) + "%" + intToHex(int7) + intToHex(int8); 
}
 
</script>