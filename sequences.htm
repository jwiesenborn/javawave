<!DOCTYPE html>
<html lang="en">
<head>
  <title>Sound Synthesis</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
  <style>
    /* Set height of the grid so .sidenav can be 100% (adjust if needed) */
    .row.content {height: 720px}
    
    /* Set gray background color and 100% height */
    .sidenav {
      background-color: #f1f1f1;
      height: 100%;
    }
    
    /* Set black background color, white text and some padding */
    footer {
      background-color: #555;
      color: white;
      padding: 15px;
    }
    
    /* On small screens, set height to 'auto' for sidenav and grid */
    @media screen and (max-width: 767px) {
      .sidenav {
        height: auto;
        padding: 15px;
      }
      .row.content {height: auto;} 
    }
    
    /* Tab code from https://www.computerhope.com/issues/ch001034.htm */
    .tab1 { margin-left: 2em; }
    .tab2 { margin-left: 4em; }
    .tab3 { margin-left: 6em; }
    
    .codebox {
    font-family: monospace;
    font-size: 9pt;
    color: blue;
    background-color: cornsilk;
    width: 70%;
    border: 1px;
    }

}
    
  </style>
</head>
<body>

<div class="container-fluid">
  <div class="row content">
    <div class="col-sm-3 sidenav">
      <h4>Sound Synthesis</h4>
      <ul class="nav nav-pills nav-stacked">
        <li><a href="index.htm">Home</a></li>
        <li><a href="theory.htm">Hypothesis</a></li>
        <li><a href="program.htm">Example Program</a></li>
        <li><a href="harmony.htm">Harmonic Computation</a></li>
        <li><a href="frequency.htm">The Frequency Equation</a></li>
        <li><a href="triad.htm">A Triad</a></li>
        <li><a href="timbre.htm">Wave Graph</a></li>
        <li><a href="tone.htm">Tone</a></li>
        <li class="active"><a href="sequences.htm">Sequences</a></li>
        <li><a href="wave.htm">The WAV format</a></li>
        <li><a href="offsets.htm">Offsets (Sequences Part 2)</a></li>
        <li><a href="musicxml.htm">MusicXML</a></li>
        <li><a href="synthesis.htm">Synthesis</a></li>
        <li><a href="a_sigh.htm">A Sigh</a></li>
        <li><a href="2019-05-26.htm">Streaming</a></li>
      </ul><br>
    </div>

    <div class="col-sm-9">
      <h4><small>TONE</small></h4>
      <hr>
      <h3>Sequences</h3>
      <p><h5><span class="glyphicon glyphicon-time"></span> Post by Jesse, 16 March 2019</h5>
      <p>How our tone will actually be calculated is the sum of two notes that diverge from the central note by a factor of &#177; 0.1. To recycle the code we have already written, we would simply add the two notes 437.47 Hz and 442.55 Hz into a chord. Recalling that the tone factor 0.1 was arbitrarily determined, we would prefer to begin the tone/note at the central frequency 440.00 Hz and then make the two notes diverge at a constant rate for the duration of the sound. Then we can listen to the result and hear how the 'opening' sounds at a variable distance.</p>
      <p>The mathematical process for this is not as easy as changing the frequency as a function of time within a loop. Waves expand or contract horizontally when their frequency multiplier changes. If a seamless wave is what we desire (like the slide of a trombone) we have to compute the sound as a <i>sequence</i> of notes varying by frequency. The wave will be very jagged if not adjusted to start where the one before it left off. Let us compute each sine wave and then add or remove so much as is necessary to make it align with the prior wave.</p>
      <p>The final intricacy will be to determine whether to add or subtract each wave; that is, to add or subtract <i>n</i> &bull; &pi; from the sine equation. This will require computing the difference between the prior sample and the sample prior to that. If it is negative, then we have a downward-sloping wave, and if it is positive, then it is an upward-sloping wave. </p>
    </div>
  </div>
</div>
<footer class="container-fluid">

</body>
</html>

<script>

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

// title: tone
// author: jesse weisenborn
// date: 3/16/2019
// version 0.3

// Global constants and objects
var samplingRate = 44100;
var bitDepth = 65535 / 2;
var durationInSeconds = 8;
var lpcm16 = new Int16Array(samplingRate * durationInSeconds);

//
// Calculate a two-second A triad in a signed
// 16-bit array, then save it to a PCM data file.
//
function dietCalc() {
  var frequency = 440.00; //hertz of the note to play
  var volume = 0.01; //volume is a multiplier between 0 and 1 (webaudio)
  var duration = lpcm16.length;
  
  var uBound = 442.55;
  var lBound = 437.47;  
  var upDif = uBound - frequency;
  var lowDif = lBound - frequency;
  
  for (i = 0; i < duration; i++) {
    var changePitch = i / duration;
    var a = pumpkinWave(i, frequency + changePitch(upDif));
    var b = pumpkinWave(i, frequency - changePitch(lowDif));
    
    var v = volumeShape(i, duration);
    //console.log(v);
    lpcm16[i] = a * v;
    }
  //download('triad.pcm',signedInt16ArrayToUnsigned(lpcm16)); 
}

//
function changePitch() {


}

//
//
function volumeShape(i, duration) {
  var v = (Math.cos(Math.PI * i / duration * .5));
  return v;
}

//
//
//
function pumpkinWave(i, frequency) {
  var a = (Math.sin((Math.PI * 2 * i * frequency) / (samplingRate)) ) * bitDepth; 
  return a;
}

// Initialize the canvas and brush objects
//var canvas = document.getElementById("dietCanvas");
//var brush = canvas.getContext("2d");
//var drawX = 0;
//var drawY = 0;
//var canWidth = parseInt(canvas.width);
//var canHeight = parseInt(canvas.height / 2);
//alert(beginX + ', ' + beginY);
//var graphX = 0;
//var graphY = 0;

///////////////////////////////////////
dietCalc(); // calculate equation array
///////////////////////////////////////

drawWave();
// Draw the equation onto the canvas
function drawWave() {
  brush.beginPath();
  brush.lineWidth = '1';
  var lineLength = lpcm16.length;
  var delta = lineLength / canWidth;
  brush.moveTo(0, canHeight + lpcm16[0]);
  for (x = 0; x < canWidth; x++) {
    var dx = parseInt(x * delta);
    var drawX = x;
    var drawY = parseInt((lpcm16[dx] / bitDepth) * canHeight) + canHeight;
    brush.lineTo(drawX, drawY);
    //alert(x + ':' + dx + ': (' + drawX + ', ' + drawY + ')');
  } 
  brush.stroke();
}

//
// Convert a signed 16-bit array to unsigned 16-bit integers,
// then to hexadecimal byte format.
//
function signedInt16ArrayToUnsigned(arr) {
  var returnString = "";
  for (i = 0; i < arr.length; i++) {
    sample = arr[i];
    if (sample >= 0) {
      var r = integerToByte_LittleEndian(sample); }
    else if (sample < 0) {
      sample = sample + 65536; // (16^4)
      var r = integerToByte_LittleEndian(sample); }
    returnString = returnString.concat(r); }
  return returnString; }

//
// Convert one 16-bit integer to hexadecimal bytes, big-endian,
// and append leading %s for the URI stream encoding.
// 
function integerToByte_BigEndian(s) {
  var doubleCheck = s;
  var int4 = s % 16;
  s = parseInt(s / 16);
  var int3 = s % 16;
  s = parseInt(s / 16);
  var int2 = s % 16;
  s = parseInt(s / 16);
  var int1 = s % 16;
  s = parseInt(s / 16); 
  //
  // Make sure the hexadecimal-converted value equals the original value.
  //if (doubleCheck != validate(int1, int2, int3, int4)) {
  //  alert("Failure: integerToByte_BigEndian(" + s + ") != " + validate(int1, int2, int3, int4) + "."); }
  //
  return "%" + intToHex(int1) + intToHex(int2) + "%" + intToHex(int3) + intToHex(int4); }

//
// Convert one 16-bit integer to hexadecimal bytes, little-endian,
// and append leading %s for the URI stream encoding.
// 
function integerToByte_LittleEndian(s) {
  var doubleCheck = s;
  var int1 = s % 16;
  s = parseInt(s / 16);
  var int2 = s % 16;
  s = parseInt(s / 16);
  var int3 = s % 16;
  s = parseInt(s / 16);
  var int4 = s % 16;
  s = parseInt(s / 16); 
  return "%" + intToHex(int2) + intToHex(int1) + "%" + intToHex(int4) + intToHex(int3); }

//
// Convert an integer in the range [0,15] to hexadecimal.
//
function intToHex(n) {
  if (n < 10) {
    if (n >= 0) {
      return n.toString(); }
    else { alert("Error: intToHex(" + n + ")"); } }
  switch (n) {
    case 10:
      var r = "a";
      break;
    case 11:
      var r = "b";
      break;
    case 12:
      var r = "c";
      break;
    case 13:
      var r = "d";
      break;
    case 14:
      var r = "e";
      break;
    case 15:
      var r = "f";
      break;
    default:
      alert("Error: intToHex(" + n + ")");
      break; }
  return r; }
  
//
// Send the data in a URI stream to a downloadable file.
// Source: https://stackoverflow.com/questions/2897619/using-html5-javascript-to-generate-and-save-a-file  
//
function download(filename, data) {
  var pom = document.createElement('a');
  pom.setAttribute('href', 'data:audio/pcm;charset=utf-8,' + data);
  pom.setAttribute('download', filename);
  if (document.createEvent) {
    var event = document.createEvent('MouseEvents');
    event.initEvent('click', true, true);
    pom.dispatchEvent(event); }
  else {
    pom.click(); } }

//
// Verify the unsigned byte computes back to the correct integer.
//
//function validate(w,x,y,z) {
//  var w = w * 16 * 16 * 16;
//  var x = x * 16 * 16;
//  var y = y * 16;
//  return w + x + y + z; }

</script>