<!DOCTYPE html>
<html lang="en">
<head>
  <title>WimpyCat</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
  <style>
    /* Set height of the grid so .sidenav can be 100% (adjust if needed) */
    .row.content {height: 720px}
    
    /* Set gray background color and 100% height */
    .sidenav {
      background-color: #f1f1f1;
      height: 100%;
    }
    
    /* Set black background color, white text and some padding */
    footer {
      background-color: #555;
      color: white;
      padding: 15px;
    }
    
    /* On small screens, set height to 'auto' for sidenav and grid */
    @media screen and (max-width: 767px) {
      .sidenav {
        height: auto;
        padding: 15px;
      }
      .row.content {height: auto;} 
    }
    
    /* Tab code from https://www.computerhope.com/issues/ch001034.htm */
    .tab1 { margin-left: 2em; }
    .tab2 { margin-left: 4em; }
    .tab3 { margin-left: 6em; }
    
    .codebox {
    font-family: monospace;
    font-size: 9pt;
    color: blue;
    background-color: cornsilk;
    width: 70%;
    border: 1px;
    }

}
    
  </style>
</head>
<body>

<div class="container-fluid">
  <div class="row content">
    <div class="col-sm-3 sidenav">
      <h4>WimpyCat: 8-bit Music Player</h4>
      <ul class="nav nav-pills nav-stacked">
        <li><a href="index.htm">Home</a></li>
        <li><a href="theory.htm">Hypothesis</a></li>
        <li><a href="program.htm">Example Program</a></li>
        <li><a href="harmony.htm">Harmonic Computation</a></li>
        <li class="active"><a href="frequency.htm">The Frequency Equation</a></li>
        <li><a href="triad.htm">A Triad</a></li>
        <li><a href="timbre.htm">Wave Graph</a></li>
        <li><a href="tone.htm">Tone</a></li>
        <li><a href="sequences.htm">Sequences</a></li>
        <li><a href="wave.htm">The WAV format</a></li>
        <li><a href="offsets.htm">Offsets (Sequences Part 2)</a></li>
        <li><a href="musicxml.htm">MusicXML</a></li>
        <li><a href="synthesis.htm">Synthesis</a></li>
        <li><a href="a_sigh.htm">A Sigh</a></li>
        <li><a href="2019-05-26.htm">Streaming</a></li>
        <li><a href="player.htm">Player</a></li>
      </ul><br>
    </div>

    <div class="col-sm-9">
      <h4><small>FREQUENCY CALCULATION</small></h4>
      <hr>
      <h3>Frequency</h3>
      <h5><span class="glyphicon glyphicon-time"></span> Post by Jesse, 2 February 2019</h5>
      <p>In order to calculate harmonic intervals and chords, we first need to know the resonant frequencies of each note in the set. Concert A is commonly identified as 440 hertz (cycles per second). Octaves are higher or lower by a factor of two, not without debate, but generally due to properties inherent in physical matter. Notes in a Western scale are exponentially distributed between two octaves at twelve equal spaces. The logarithm of a note's frequency, then, is a base of 2 times the fraction of its relative position <i>n</i> in the scale:</p>
      <p><center>Frequency = 440 Hz &bull; 2<sup><i>n</i>/12</sup></p>
      <!--p align='center'><math>
	Frequency = 440 Hz • 2<sup><box>n<over>2</box>
      </math>-->
      <br/><table border=1 >
      <tr><td style="padding:10px"><b>Note</b></td><td style="padding:10px"><b><center><i>n</i>/12</center></b></td><td style="padding:10px"><b>Frequency</b></td></b></tr>
      <tr><td><center>A</center></td><td><center>0/12</center></td><td><center>440.00 Hz</center></td></tr>
      <tr><td><center>A#</center></td><td><center>1/12</center></td><td><center>466.16 Hz</center></td></tr>
      <tr><td><center>B</center></td><td><center>2/12</center></td><td><center>493.88 Hz</center></td></tr>
      <tr><td><center>C</center></td><td><center>3/12</center></td><td><center>523.25 Hz</center></td></tr>
      <tr><td><center>C#</center></td><td><center>4/12</center></td><td><center>554.37 Hz</center></td></tr>
      <tr><td><center>D</center></td><td><center>5/12</center></td><td><center>587.33 Hz</center></td></tr>
      <tr><td><center>D#</center></td><td><center>6/12</center></td><td><center>622.25 Hz</center></td></tr>
      <tr><td><center>E</center></td><td><center>7/12</center></td><td><center>659.26 Hz</center></td></tr>
      <tr><td><center>F</center></td><td><center>8/12</center></td><td><center>698.46 Hz</center></td></tr>
      <tr><td><center>F#</center></td><td><center>9/12</center></td><td><center>739.99 Hz</center></td></tr>
      <tr><td><center>G</center></td><td><center>10/12</center></td><td><center>783.99 Hz</center></td></tr>
      <tr><td><center>G#</center></td><td><center>11/12</center></td><td><center>830.61 Hz</center></td></tr>
      <tr><td><center>A</center></td><td><center>12/12</center></td><td><center>880.00 Hz</center></td></tr>
      </table></center></p>
      <p>The same equation may also calculate descending pitches below n = 0 and those above n = 12 at the next octave. It may also compute notes between pitches, or frequencies at any fraction between steps; for instance a quarter-half-step above concert C would equal 440 Hz • 2<sup>3.25/12</sup> = 530.86 Hz.</p>
      <p>Update: Scientific notation octaves are {C-B}. 
	<a href="https://en.wikipedia.org/wiki/Scientific_pitch_notation">https://en.wikipedia.org/wiki/Scientific_pitch_notation</a></p>
      <!-- <h3>Nonwestern scales</h3>
      <h5><span class="glyphicon glyphicon-time"></span> Post by Jesse, 24 February</h5>
      <p>When computing frequencies mathematically, one can modify the equation to compute scales with different numbers of notes. The pentatonic scale, for instance, has notes at five equal spaces. Each note's frequency correlates with five equidistant notes in the Western scale:</p>
      <p><center>Frequency = 466.16 &bull; 2<sup><i>n</i>/4</sup></center></p>
      <p align='center'><table border=1>
      <tr><td><b>Note</b></td><td><b><center><i>n</i>/12</center></b></td><td><b>Frequency</b></td></b></tr>
      <tr><td>A</td><td><center>0/6</center></td><td>440.00 Hz</td></tr>
      <tr><td>B</td><td><center>1/6</center></td><td>493.88 Hz</td></tr>
      <tr><td>C#</td><td><center>2/6</center></td><td>554.37 Hz</td></tr>
      <tr><td>D#</td><td><center>3/6</center></td><td>622.25 Hz</td></tr>
      <tr><td>F</td><td><center>4/6</center></td><td>698.46 Hz</td></tr> -->
      <!--<p><br/><button onClick="demo1();">Run example</button> *Works in the latest version of Mozilla Firefox</p>-->
    </div>
  </div>
</div>

<footer class="container-fluid">
  <p>Jesse Wiesenborn | <a href="https://github.com/jwiesenborn/javawave">GitHub</a></p>
</body>
</html>

<script>

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

// title: chord demo
// author: jesse wiesenborn
// date: 1/27/2019
// version 0.1

//
// Calculate a ten-second sine wave at 440 Hz in a signed
// 16-bit array, then save it to a PCM data file.
//
function demo1() {
  var samplingRate = 44100;
  var bitDepth = 65535 / 2;
  var frequency1 = 440.00;
  var frequency2 = 554.37;
  var frequency3 = 659.26;
  var durationInSeconds = 10;
  var lpcm16 = new Int16Array(samplingRate * durationInSeconds);
  for (i = 0; i < lpcm16.length; i++) {
    lpcm16[i] = (
      (Math.sin((Math.PI * 2 * i * frequency1) / (samplingRate)) / 3 ) + 
      (Math.sin((Math.PI * 2 * i * frequency2) / (samplingRate)) / 3 ) + 
      (Math.sin((Math.PI * 2 * i * frequency3) / (samplingRate)) / 3 )
    ) * bitDepth; }
  download('triad.pcm',signedInt16ArrayToUnsigned(lpcm16)); }

//
// Convert a signed 16-bit array to unsigned 16-bit integers,
// then to hexadecimal byte format.
//
function signedInt16ArrayToUnsigned(arr) {
  var returnString = "";
  for (i = 0; i < arr.length; i++) {
    sample = arr[i];
    if (sample >= 0) {
      var r = integerToByte_LittleEndian(sample); }
    else if (sample < 0) {
      sample = sample + 65536; // (16^4)
      var r = integerToByte_LittleEndian(sample); }
    returnString = returnString.concat(r); }
  return returnString; }

//
// Convert one 16-bit integer to hexadecimal bytes, big-endian,
// and append leading %s for the URI stream encoding.
// 
function integerToByte_BigEndian(s) {
  var doubleCheck = s;
  var int4 = s % 16;
  s = parseInt(s / 16);
  var int3 = s % 16;
  s = parseInt(s / 16);
  var int2 = s % 16;
  s = parseInt(s / 16);
  var int1 = s % 16;
  s = parseInt(s / 16); 
  //
  // Make sure the hexadecimal-converted value equals the original value.
  //if (doubleCheck != validate(int1, int2, int3, int4)) {
  //  alert("Failure: integerToByte_BigEndian(" + s + ") != " + validate(int1, int2, int3, int4) + "."); }
  //
  return "%" + intToHex(int1) + intToHex(int2) + "%" + intToHex(int3) + intToHex(int4); }

//
// Convert one 16-bit integer to hexadecimal bytes, little-endian,
// and append leading %s for the URI stream encoding.
// 
function integerToByte_LittleEndian(s) {
  var doubleCheck = s;
  var int1 = s % 16;
  s = parseInt(s / 16);
  var int2 = s % 16;
  s = parseInt(s / 16);
  var int3 = s % 16;
  s = parseInt(s / 16);
  var int4 = s % 16;
  s = parseInt(s / 16); 
  return "%" + intToHex(int2) + intToHex(int1) + "%" + intToHex(int4) + intToHex(int3); }

//
// Convert an integer in the range [0,15] to hexadecimal.
//
function intToHex(n) {
  if (n < 10) {
    if (n >= 0) {
      return n.toString(); }
    else { alert("Error: intToHex(" + n + ")"); } }
  switch (n) {
    case 10:
      var r = "a";
      break;
    case 11:
      var r = "b";
      break;
    case 12:
      var r = "c";
      break;
    case 13:
      var r = "d";
      break;
    case 14:
      var r = "e";
      break;
    case 15:
      var r = "f";
      break;
    default:
      alert("Error: intToHex(" + n + ")");
      break; }
  return r; }
  
//
// Send the data in a URI stream to a downloadable file.
// Source: https://stackoverflow.com/questions/2897619/using-html5-javascript-to-generate-and-save-a-file  
//
function download(filename, data) {
  var pom = document.createElement('a');
  pom.setAttribute('href', 'data:audio/pcm;charset=utf-8,' + data);
  pom.setAttribute('download', filename);
  if (document.createEvent) {
    var event = document.createEvent('MouseEvents');
    event.initEvent('click', true, true);
    pom.dispatchEvent(event); }
  else {
    pom.click(); } }

//
// Verify the unsigned byte computes back to the correct integer.
//
//function validate(w,x,y,z) {
//  var w = w * 16 * 16 * 16;
//  var x = x * 16 * 16;
//  var y = y * 16;
//  return w + x + y + z; }

</script>