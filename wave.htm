<!DOCTYPE html>
<html lang="en">
<head>
  <title>WimpyCat</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
  <style>
    /* Set height of the grid so .sidenav can be 100% (adjust if needed) */
    .row.content {height: 720px}
    
    /* Set gray background color and 100% height */
    .sidenav {
      background-color: #f1f1f1;
      height: 100%;
    }
    
    /* Set black background color, white text and some padding */
    footer {
      background-color: #555;
      color: white;
      padding: 15px;
    }
    
    /* On small screens, set height to 'auto' for sidenav and grid */
    @media screen and (max-width: 767px) {
      .sidenav {
        height: auto;
        padding: 15px;
      }
      .row.content {height: auto;} 
    }
    
    /* Tab code from https://www.computerhope.com/issues/ch001034.htm */
    .tab1 { margin-left: 2em; }
    .tab2 { margin-left: 4em; }
    .tab3 { margin-left: 6em; }
    
    .codebox {
    font-family: monospace;
    font-size: 9pt;
    color: blue;
    background-color: cornsilk;
    width: 70%;
    border: 1px;
    }

}
    
  </style>
</head>
<body>

<div class="container-fluid">
  <div class="row content">
    <div class="col-sm-3 sidenav">
      <h4>WimpyCat: 8-bit Music Player</h4>
      <ul class="nav nav-pills nav-stacked">
        <li><a href="index.htm">Home</a></li>
        <li><a href="theory.htm">Hypothesis</a></li>
        <li><a href="program.htm">Example Program</a></li>
        <li><a href="harmony.htm">Harmonic Computation</a></li>
        <li><a href="frequency.htm">The Frequency Equation</a></li>
        <li><a href="triad.htm">A Triad</a></li>
        <li><a href="timbre.htm">Wave Graph</a></li>
        <li><a href="tone.htm">Tone</a></li>
        <li><a href="sequences.htm">Sequences</a></li>
        <li class="active"><a href="wave.htm">The WAV format</a></li>
        <li><a href="offsets.htm">Offsets (Sequences Part 2)</a></li>
        <li><a href="musicxml.htm">MusicXML</a></li>
        <li><a href="synthesis.htm">Synthesis</a></li>
        <li><a href="a_sigh.htm">A Sigh</a></li>
        <li><a href="2019-05-26.htm">Streaming</a></li>
        <li><a href="player.htm">Player</a></li>
      </ul><br>
    </div>

    <div class="col-sm-9">
      <h4><small>WAVE</small></h4>
      <hr>
      <h3>The WAV file format</h3>
      <p><h5><span class="glyphicon glyphicon-time"></span> Post by Jesse, 24 March 2019</h5></p>
      <p>Here we have encoded our PCM audio data into the WAV container, working from <a href="http://soundfile.sapp.org/doc/WaveFormat/">this specification</a>. Now our audio can play back on most computers without the user installing extra packages. It is still uncompressed audio, so it takes up about 86 kilobytes per second. That is going to add up quick. Slower computers or those with less memory will have a problem making larger files. Maybe there is a way to stream it directly from the browser.</p>
	  <p>Working with strong data types in ECMAscript is a little bit finicky. We defined a number of data types manually to format the audio in WAV format. This step would undoubtably be made easier by adapting to TypeScript, a Javascript compiler by Microsoft, but it wasn't absolutely necessary this time.</p>
      <p><button onclick='dietCalc()'>Download WAV</button> <a href="wave.js">Source code</a> *Requires the latest version of Mozilla Firefox.</p>
    </div>
  </div>
</div>
<footer class="container-fluid">
  <p>Jesse Wiesenborn | <a href="https://github.com/jwiesenborn/javawave">GitHub</a></p>
</body>
</html>

<script>

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

// title: wave output test
// author: jesse wiesenborn
// date: 3/25/2019
// version 0.5

// Global constants and objects
var samplingRate = 44100;
var BitsPerSample = 16; //
var bitDepth = 65535 / 2; //((2 ^ BitsPerSample) - 1) / 2;
var durationInSeconds = 8;
var lpcm16 = new Int16Array(samplingRate * durationInSeconds);
var numchannel = 1;

//
// Calculate a note at 440 Hz in a signed
// 16-bit array, then save it to a PCM data file.
//
function dietCalc() {
  var frequency = 440.00; //hertz of the note to play
  var volume = 0.01; //volume is a multiplier between 0 and 1
  var duration = lpcm16.length;
  
  var uBound = 442.55;
  var lBound = 437.47;  
  var upDif = uBound - frequency;
  var lowDif = lBound - frequency;
  
  for (i = 0; i < duration; i++) {
    var changePitch = i / duration;
    //var a = pumpkinWave(i, frequency + changePitch(upDif));
    //var b = pumpkinWave(i, frequency - changePitch(lowDif));
    var c = pumpkinWave(i, frequency);
    //var v = volumeShape(i, duration);
    //console.log(c);
    lpcm16[i] = c; // * v;
    }
  //alert(textTo4Byte_BigEndian());
  //alert(dataChunk);
  var outputFile = wavChunk(lpcm16.length) + fmtChunk() + dataChunk(lpcm16);
  //console.log(outputFile);
  
  //document.write("WAVE chunk = ");
  //document.write(wavChunk(lpcm16.length));
  //document.write("\r\n<br/>");
  //document.write("FMT chunk = ");
  //document.write(fmtChunk());
  //document.write("\r\n<br/>");
  //document.write("DATA chunk = ");
  //document.write(dataChunk(lpcm16));
  
  download('sound.wav', outputFile); 
  
}

//
// WAV File Format Encoding functions
//

// WAVE chunk
// integerToByte_LittleEndian returns a 2-Byte little-endian integer.
// integerTo4Byte_LittleEndian returns 4 bytes etc.
function wavChunk(dtlength) {
  var ChunkID = textTo4Byte_BigEndian("RIFF");
  var ChunkSize = integerTo4Byte_LittleEndian(36 + dtlength);
  var Format = textTo4Byte_BigEndian("WAVE");
  return (ChunkID + ChunkSize + Format);
}

// FORMAT chunk
//
function fmtChunk() {
  var Subchunk1ID = textTo4Byte_BigEndian("fmt ");
  var Subchunk1Size = integerTo4Byte_LittleEndian(16); //PCM
  var AudioFormat = integerToByte_LittleEndian(1); //Uncompressed
  var NumChannels = integerToByte_LittleEndian(numchannel); //Mono
  var SampleRate = integerTo4Byte_LittleEndian(samplingRate);
  var ByteRate = integerTo4Byte_LittleEndian(samplingRate * numchannel * (BitsPerSample/8)); //SampleRate * NumChannels
  var BlockAlign = integerToByte_LittleEndian(numchannel * (BitsPerSample/8));
  var bitsPerSampleEncoded = integerToByte_LittleEndian(BitsPerSample);
  return(Subchunk1ID + Subchunk1Size + AudioFormat + NumChannels + SampleRate + ByteRate + BlockAlign + bitsPerSampleEncoded);
}

// DATA chunk
function dataChunk(dt) {
  var Subchunk2ID = textTo4Byte_BigEndian("data");
  var Subchunk2Size = integerTo4Byte_LittleEndian(dt.length * numchannel * (BitsPerSample/8)); //# of bytes in the array
  //alert("DT length=" + dt.length);
  var Data = signedInt16ArrayToUnsigned(dt);
  return(Subchunk2ID + Subchunk2Size + Data);
}

//
//
function volumeShape(i, duration) {
  var v = (Math.cos(Math.PI * i / duration * .5));
  return v;
}

//
//
//
function pumpkinWave(i, frequency) {
  var a = (Math.sin((Math.PI * 2 * i * frequency) / (samplingRate)) ) * bitDepth; 
  return a;
}

// Initialize the canvas and brush objects
//var canvas = document.getElementById("dietCanvas");
//var brush = canvas.getContext("2d");
////var drawX = 0;
////var drawY = 0;
//var canWidth = parseInt(canvas.width);
//var canHeight = parseInt(canvas.height / 2);
////alert(beginX + ', ' + beginY);
//var graphX = 0;
//var graphY = 0;

///////////////////////////////////////
//dietCalc(); // calculate equation array
///////////////////////////////////////

//drawWave();
// Draw the equation onto the canvas
function drawWave() {
  brush.beginPath();
  brush.lineWidth = '1';
  var lineLength = lpcm16.length;
  var delta = lineLength / canWidth;
  brush.moveTo(0, canHeight + lpcm16[0]);
  for (x = 0; x < canWidth; x++) {
    var dx = parseInt(x * delta);
    var drawX = x;
    var drawY = parseInt((lpcm16[dx] / bitDepth) * canHeight) + canHeight;
    brush.lineTo(drawX, drawY);
    //alert(x + ':' + dx + ': (' + drawX + ', ' + drawY + ')');
  } 
  brush.stroke();
}

//
// Convert a signed 16-bit array to unsigned 16-bit integers,
// then to hexadecimal byte format.
//
function signedInt16ArrayToUnsigned(arr) {
  var returnString = "";
  for (i = 0; i < arr.length; i++) {
    sample = arr[i];
    if (sample >= 0) {
      var r = integerToByte_LittleEndian(sample); }
    else if (sample < 0) {
      sample = sample + 65536; // (16^4)
      var r = integerToByte_LittleEndian(sample); }
    returnString = returnString.concat(r); }
  return returnString; }

//
// Convert one 16-bit integer to hexadecimal bytes, big-endian,
// and append leading %s for the URI stream encoding.
// 
function integerToByte_BigEndian(s) {
  var doubleCheck = s;
  var int4 = s % 16;
  s = parseInt(s / 16);
  var int3 = s % 16;
  s = parseInt(s / 16);
  var int2 = s % 16;
  s = parseInt(s / 16);
  var int1 = s % 16;
  s = parseInt(s / 16); 
  //
  // Make sure the hexadecimal-converted value equals the original value.
  //if (doubleCheck != validate(int1, int2, int3, int4)) {
  //  alert("Failure: integerToByte_BigEndian(" + s + ") != " + validate(int1, int2, int3, int4) + "."); }
  //
  return "%" + intToHex(int1) + intToHex(int2) + "%" + intToHex(int3) + intToHex(int4); }

//
// Convert one 16-bit integer to hexadecimal bytes, little-endian,
// and append leading %s for the URI stream encoding.
// 
function integerToByte_LittleEndian(s) {
  var doubleCheck = s;
  var int1 = s % 16;
  s = parseInt(s / 16);
  var int2 = s % 16;
  s = parseInt(s / 16);
  var int3 = s % 16;
  s = parseInt(s / 16);
  var int4 = s % 16;
  s = parseInt(s / 16); 
  return "%" + intToHex(int2) + intToHex(int1) + "%" + intToHex(int4) + intToHex(int3); }


// Data chunks are 4 bytes
// Convert one 16-bit integer to hexadecimal bytes, little-endian,
// and append leading %s for the URI stream encoding.
// 
function integerTo4Byte_LittleEndian(s) {
  //var doubleCheck = s;
  var int1 = s % 16;
  s = parseInt(s / 16);
  var int2 = s % 16;
  s = parseInt(s / 16);
  var int3 = s % 16;
  s = parseInt(s / 16);
  var int4 = s % 16;
  s = parseInt(s / 16); 
  var int5 = s % 16;
  s = parseInt(s / 16);
  var int6 = s % 16;
  s = parseInt(s / 16);
  var int7 = s % 16;
  s = parseInt(s / 16);
  var int8 = s % 16;
  s = parseInt(s / 16); 
  return "%" + intToHex(int2) + intToHex(int1) + "%" + intToHex(int4) + intToHex(int3)  
  + "%" + intToHex(int6) + intToHex(int5) + "%" + intToHex(int8) + intToHex(int7);
  }


//
// Convert an integer in the range [0,15] to hexadecimal.
//
function intToHex(n) {
  if (n < 10) {
    if (n >= 0) {
      return n.toString(); }
    else { alert("Error: intToHex(" + n + ")"); } }
  switch (n) {
    case 10:
      var r = "a";
      break;
    case 11:
      var r = "b";
      break;
    case 12:
      var r = "c";
      break;
    case 13:
      var r = "d";
      break;
    case 14:
      var r = "e";
      break;
    case 15:
      var r = "f";
      break;
    default:
      alert("Error: intToHex(" + n + ")");
      break; }
  return r; }
  
//
// Send the data in a URI stream to a downloadable file.
// Source: https://stackoverflow.com/questions/2897619/using-html5-javascript-to-generate-and-save-a-file  
//
function download(filename, data) {
  var pom = document.createElement('a');
  pom.setAttribute('href', 'data:audio/pcm;charset=utf-8,' + data);
  pom.setAttribute('download', filename);
  if (document.createEvent) {
    var event = document.createEvent('MouseEvents');
    event.initEvent('click', true, true);
    pom.dispatchEvent(event); }
  else {
    pom.click(); } }

//File format blocks are two to four bytes.
//Convert a 4-character string to 4 bytes, big-endian
//Insert % sign for URI encoding.
function textTo4Byte_BigEndian(t) {
  t3 = t.charCodeAt(3);
  t2 = t.charCodeAt(2);
  t1 = t.charCodeAt(1);
  t0 = t.charCodeAt(0);
  
  //console.log(t3 + ';' + t2 + ';' + t1 + ';' + t0);

  var int8 = t3 % 16;
  t3 = parseInt(t3 / 16);
  var int7 = t3 % 16;
  t3 = parseInt(t3 / 16);
  var int6 = t2 % 16;
  t2 = parseInt(t2 / 16);
  var int5 = t2 % 16;
  t2 = parseInt(t2 / 16); 
  var int4 = t1 % 16;
  t1 = parseInt(t1 / 16);
  var int3 = t1 % 16;
  t1 = parseInt(t1 / 16);
  var int2 = t0 % 16;
  t0 = parseInt(t0 / 16);
  var int1 = t0 % 16;
  t0 = parseInt(t0 / 16); 
  
  return "%" + intToHex(int1) + intToHex(int2) + "%" + intToHex(int3) + intToHex(int4) 
  + "%" + intToHex(int5) + intToHex(int6) + "%" + intToHex(int7) + intToHex(int8); 
}



//
// Verify the unsigned byte computes back to the correct integer.
//
//function validate(w,x,y,z) {
//  var w = w * 16 * 16 * 16;
//  var x = x * 16 * 16;
//  var y = y * 16;
//  return w + x + y + z; }

</script>